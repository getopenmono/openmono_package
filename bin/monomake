#!/bin/bash


VERSION="1.5.2"
APPNAME="monomake"
MONO_PATH=$(dirname $(dirname `which $APPNAME`))
if [ -d $MONO_PATH/openmono ]; then
	MONO_PATH=$MONO_PATH/openmono
elif [ -d $MONO_PATH/lib/openmono ]; then
	MONO_PATH=$MONO_PATH/lib/openmono
else
	echo "Could not find openmono dir!"
	exit 1;
fi

source $MONO_PATH/configuration.sh

PROJECT_FILES="$TEMPLATE_DIR/app_controller.h $TEMPLATE_DIR/app_controller.cpp"
BARE_PROJECT_FILES="$TEMPLATE_DIR/app_controller_bare.h $TEMPLATE_DIR/app_controller_bare.cpp"

AUTOCOMPLETE_INCLUDES="-I$MONO_PATH/mono/include\n\
-I$MONO_PATH/mono/include/display\n\
-I$MONO_PATH/mono/include/display/ui\n\
-I$MONO_PATH/mono/include/display/ili9225g\n\
-I$MONO_PATH/mono/include/io\n\
-I$MONO_PATH/mono/include/media\n\
-I$MONO_PATH/mono/include/mbed/api\n\
-I$MONO_PATH/mono/include/mbed/hal\n\
-I$MONO_PATH/mono/include/mbed/libraries/fs/sd\n\
-I$MONO_PATH/mono/include/mbed/target_cypress\n"

function usage {
    echo "OpenMono SDK Utility $VERSION"
	echo "Create new projects, access monoprog and other helper functions"
    echo ""
    echo "Usage:"
    echo "${APPNAME} COMMAND [options]"
    echo ""
    echo "Commands:"
    echo "  project [--bare] [name]  Create a new project folder. Default name is: new_mono_project"
    echo "  monoprog [...]           Shortcut to access the MonoProg USB programmer"
    echo "  program ELF_FILE         Upload an application to mono"
    echo "  reboot                   Send Reboot command to Mono, using the Arduino DTR method"
    echo "  detect                   See if a mono is connected and if it is in bootloader"
	echo "  serial                   Return Mono's serial device file path: /dev/..."
    echo "  version [--bare]         Display the current version of $APPNAME"
    echo "  path [--bare]            Display the path to the Mono Environment installation dir"
    echo ""
}

function printMonoPath {
	if [[ $# -ge 1 && $1 == "--bare" ]]; then
		echo $MONO_PATH
	else
    	echo "Mono Environment Path: $MONO_PATH"
	fi
}

function writeMakefile {
    echo "Writing Makefile: $2..."
    DATE=`date`
    echo "# Makefile created by $APPNAME, $DATE" > $2
    echo "# Project: $1" >> $2
    echo "" >> $2
    echo "MONO_PATH=$MONO_PATH" >> $2
    echo "include \$(MONO_PATH)/predefines.mk" >> $2
    echo "" >> $2
    echo "TARGET=$1" >> $2
    echo "" >> $2
	echo "include \$(MONO_PATH)/mono.mk" >> $2
}

function projectCommand {
    if [ $# -gt 1 ]; then
        if [ $# -gt 2 ]; then
            if [ $2 = "--bare" ]; then
                echo "Creating new bare mono project: $3..."
                createBareProjectFolder $3
            elif [ $3 = "--bare" ]; then
                echo "Creating new bare mono project: $2..."
                createBareProjectFolder $2
            else
                echo "Creating new mono project: $2..."
                createProjectFolder $2
            fi
        elif [ $2 = "--bare" ]; then
            echo "Creating new bare mono project: new_mono_project..."
            createBareProjectFolder "new_mono_project"
        else
            echo "Creating new mono project: $2..."
            createProjectFolder $2
        fi
    elif [ $# -eq 1 ]; then
        echo "Creating new mono project: new_mono_project..."
        createProjectFolder "new_mono_project"
    fi
}

function createProjectFolder {
    if [ -e $1 ]; then
        echo "Err: Project target directory already exists!"
        return 1
    else
        mkdir -p $1
        for file in ${PROJECT_FILES}; do
            echo " * $1/$(basename $file)"
            cp $MONO_PATH/$file $1/.
        done
        writeMakefile $1 $1/Makefile
        writeAtomEditorProjectFiles $1
    fi
}

function createBareProjectFolder {
    if [ -e $1 ]; then
        echo "Err: Project target directory already exists!"
        return 1
    else
        mkdir -p $1
        for file in ${BARE_PROJECT_FILES}; do
            echo " * $1/$(basename $file | sed 's/_bare//')"
            cp $MONO_PATH/$file $1/$(basename $file | sed 's/_bare//')
        done
        writeMakefile $1 $1/Makefile
        writeAtomEditorProjectFiles $1
    fi
}

function writeAtomEditorProjectFiles {
    echo "Atom Project Settings: Writing Auto complete includes..."
    echo -e "$AUTOCOMPLETE_INCLUDES" > $1/.clang_complete
}

function probeBootloader {
	$MONOPROG_DIR/monoprog -d
}

function monoprog {
	$MONOPROG_DIR/monoprog $1 "$2" "$3" "$4"
}

function printVersion {
	if [[ $# -ge 1 && $1 == "--bare" ]]; then
		echo $VERSION
	else
		echo "${APPNAME} version ${VERSION}"
	fi
}

function rebootMonoDtr {
	python $MONO_PATH/reboot.py
}

function probeSerial {
	python $MONO_PATH/probe_serial.py
}

if [ $# -lt 1 ]; then
    echo "ERR: No command argument given! You must provide a command"
    usage
	exit 1
elif [ $1 == "project" ]; then
    projectCommand $1 $2 $3
elif [ $1 == "reboot" ]; then
    rebootMonoDtr
elif [ $1 == "monoprog" ]; then
    monoprog "$2" "$3" "$4" "$5"
elif [ $1 == "version" ]; then
    printVersion $2
elif [ $1 == "path" ]; then
    printMonoPath $2
elif [ $1 == "detect" -o $1 == "bootldr" ]; then
	if [ $1 == "bootldr" ];then
		echo "Note: bootldr is deprecated, use detect instead!"
	fi
    probeBootloader
elif [ $1 == "-p" -o $1 == "program" ]; then
	if [ $1 == "-p" ];then
		echo "Note: -p is deprecated, use program instead!"
	fi
    monoprog -p $2 --verbose=2
elif [ $1 == "serial" ]; then
	probeSerial
else
    echo "ERR: Unknown command $1"
    usage
	exit 1
fi
