function confirmBuild {
    echo "Will build package with version $VERSION"
    read -p "Are you sure? (y/n)" -n 1 -r
    echo
    if ! [[ $REPLY =~ ^[yY]$ ]]; then
        echo "Aborting!"
        exit
    fi
}

function downloadGcc {
	FILE=$(basename $1)
	
	if [ ! -f $FILE ]; then
		echo "Downloading GCC Embedded Arm..."
		curl -O -L $1
	fi
	
	if [ ! -d $GCC_ARM_DIR_NAME ]; then
		echo "Extracting GCC..."
		tar -xjf $FILE
	fi
	
	if [ ! -d $GCC_ARM_DIR_NAME ]; then
		echo "Error: extracted directory is not named $GCC_ARM_DIR_NAME"
		return 1
	fi
	echo "GCC downloaded and extracted"
}

function downloadUrl
{
	echo "Downloading $1..."
	curl -O -L $2
}

function copyGcc {
	echo "Copying GCC to dist dir..."
    if [ ! -d $2/$1 ]; then
		mkdir -p "$2"
		cp -r "$1" "$2"
	fi
}

function cloneMonoProg {
	if [ ! -d $MONOPROG_NAME ]; then
		echo "Cloing monoprog from GitHub..."
		git clone $MONOPROG_GIT_URL
	else
		echo "Pulling monoprog changes from GitHub..."
		CUR_DIR=`pwd`
		cd $MONOPROG_NAME
		git checkout -- .
		git pull
		cd $CUR_DIR
	fi
}

function cloneMonoFramework {
	if [ ! -d $MONOFRMWRK_NAME ]; then
		echo "Cloing mono framework from GitHub..."
		git clone $MONOFRMWRK_GIT_URL $MONOFRMWRK_NAME
	else
		echo "Pulling mono framework changes from GitHub..."
		cd $MONOFRMWRK_NAME
		git checkout -- .
		git pull
		cd ..
	fi
}

function cloneMbedLibrary {
	if [ ! -d $MBED_LIB_NAME ]; then
		echo "Cloing mbed Library from GitHub..."
		git clone $MBED_LIB_GIT_URL $MBED_LIB_NAME
	else
		echo "Pulling mbed Library changes from GitHub..."
		cd $MBED_LIB_NAME
		git checkout -- .
		git pull
		cd ..
	fi
}

function cloneMbedCompLibrary {
	if [ ! -d $MBEDCOMP_LIB_NAME ]; then
		echo "Cloing mono mbed Library from GitHub..."
		git clone $MBEDCOMP_LIB_GIT_URL $MBEDCOMP_LIB_NAME
	else
		echo "Pulling mono mbed Library changes from GitHub..."
		cd $MBEDCOMP_LIB_NAME
		git checkout -- .
		git pull
		cd ..
	fi
}

function buildMbedCompLibrary {
	echo "Compiling mono mbed Library..."
	cd $MBEDCOMP_LIB_NAME
	make clean
	make mbed
	cd ..
}

function clonePsoc5Library {
	if [ ! -d $PSOC5_LIB_NAME ]; then
		echo "Cloing mono PSoC5 Library from GitHub..."
		git clone $PSOC5_LIB_GIT_URL $PSOC5_LIB_NAME
	else
		echo "Pulling mono PSoC5 Library changes from GitHub..."
		cd $PSOC5_LIB_NAME
		git checkout -- .
		git pull
		cd ..
	fi
}

function buildPsoc5Library {
	echo "Compiling mono PSoC5 Library..."
	cd $PSOC5_LIB_NAME
	make clean
	make library
	cd ..
}

function buildMonoFramework {
	echo "Compiling mono framework..."
	cd $MONOFRMWRK_NAME
	make clean
	make release
	cd ..
}

function compileMonoprog {
	echo "Compiling monoprog..."
	CUR_DIR=`pwd`
	cd $MONOPROG_NAME
	./compile.sh
	cd $CUR_DIR
	echo "Copying to monoprog dist... ($1 --> $2)"
	mkdir -p $2
	cp -r $1 $2
}

function compileMonoprogWin {
	echo "Compiling monoprog..."
	CUR_DIR=`pwd`
	cd $MONOPROG_NAME
	./configuration.bat
	qmake -tp vc monoprog.pro
	MSBuild.exe monoprog.vcxproj //p:Configuration=Release //p:Platform=x64
	cd $CUR_DIR
	echo "Copying to monoprog dist..."
	mkdir -p $2
	cp -r $1 $2
	windeployqt.exe $2/monoprog.exe --release --no-translations --dir $2
}

function writeConfigurationFile {
	echo "Writing monomake configuration file..."
	echo "#!/bin/bash" > $1
	DATE=`date`
	echo "# This is the configuration file for monomake, autogenerated $DATE" >> $1
	echo "" >> $1
	echo "TEMPLATE_DIR=$(basename $TEMPLATE_DIR)" >> $1
	echo "MAKEFILE_DIR=\$MONO_PATH" >> $1
	echo "MONOPROG_DIR=\$MONO_PATH/monoprog/$2" >> $1
	if [ "$3" = "" ]; then
		echo "Using default Bash monomake tool, in configuration."
		echo "MONOMAKE=$MONOMAKE_BASH" >> $1
	else
		echo "MONOMAKE=$3" >> $1
	fi
}

function writePSConfigurationFile {
	echo "Writing monomake configuration file..."
	echo "#Requires -Version 2" > $1
	DATE=`date`
	echo "# This is the configuration file for monomake, autogenerated $DATE" >> $1
	echo "" >> $1
	echo "\$TEMPLATE_DIR=\"$(basename $TEMPLATE_DIR)\"" >> $1
	echo "\$MAKEFILE_DIR=\"\$ScriptDir\"" >> $1
	echo "\$MONOPROG_DIR=\"\$ScriptDir/$MONOPROG_NAME/$2\"" >> $1
	if [ "$3" = "" ]; then
		echo "Using default Bash monomake tool, in configuration."
		echo "\$MONOMAKE=\"$MONOMAKE_BASH\"" >> $1
	else
		echo "\$MONOMAKE=\"$3\"" >> $1
	fi
}

function makeConfigurationFile {
	echo "Writing $1..."
	echo "# This is an auto generated file for OpenMono SDK $VERSION" > $1
	echo "" >> $1
	
	if [ "$4" = "" ]; then
		echo "ARCH=\"\$(MONO_PATH)/$GCC_ARM_DIR_NAME/bin/arm-none-eabi-\"" >> $1
	else
		echo "Writing custom Makefile ARCH variable: $4"
		echo "ARCH=\"$4\"" >> $1
	fi
	
	echo "INCLUDE_DIR=\$(MONO_PATH)/mono/include/mbed/target_cypress" >> $1
	echo "BUILD_DIR=build" >> $1
	echo "MONO_FRAMEWORK_PATH=\$(MONO_PATH)/mono" >> $1
	echo "MONOPROG=\$(MONO_PATH)/monoprog/$2" >> $1
	if [ "$3" = "" ]; then
		echo "Using default Bash monomake tool, in Makefile configuration."
		echo "MONOMAKE=$MONOMAKE_BASH" >> $1
	else
		echo "MONOMAKE=$3" >> $1
	fi
	cat ../../predefines_statics.mk >> $1
}

function copyFiles {
	echo "Copying $1 to dist... ($2 --> $3)"
	cp -r $2 $3
}

function modifyMakefile {
    ARCH="ARCH=$2"

    if [ -z "$2" ]; then
        echo "Using default GCC ARCH value: \"../$GCC_ARM_DIR_NAME/bin/arm-none-eabi-\""
        
        if ! [ -f "$1/../$GCC_ARM_DIR_NAME/bin/arm-none-eabi-gcc" ]; then
            echo "ERROR: No GCC compiler found at: $1/../$GCC_ARM_DIR_NAME/bin/arm-none-eabi-!"
            exit 1
        fi
        
        ARCH="ARCH=\"../$GCC_ARM_DIR_NAME/bin/arm-none-eabi-\""
    else
        if ! [ -f "$2-gcc" ]; then
            echo "ERROR: No GCC compiler found at: $2"
            exit 1
        fi
    fi
    
    echo "replacing GCC file path in makefile to: $ARCH"
    sed -i.bak "s#ARCH=\".*\"#$ARCH#g" $1/Makefile
    if ! [ -z "$2" ]; then
        ARCH="ARCH=\"../../\"$2"
    else
        ARCH="ARCH=\"../../../$GCC_ARM_DIR_NAME/bin/arm-none-eabi-\""
        
        if ! [ -f "$1/src/cypress/../../../$GCC_ARM_DIR_NAME/bin/arm-none-eabi-gcc" ]; then
            echo "ERROR: No compiler found at: $1/src/cypress/../../../$GCC_ARM_DIR_NAME/bin/arm-none-eabi-"
            exit 1
        fi
    fi
    
    echo "   - and recursive hardful makefiles to: $ARCH"
    
    sed -i.bak "s#ARCH=\".*\"#$ARCH#g" $1/src/cypress/Makefile
    sed -i.bak "s#ARCH=\".*\"#$ARCH#g" $1/src/mbedcomp/Makefile


    # INCLUDE_DIR=../$PSOC5_LIB_NAME/include
    # echo "replacing include dir: $INCLUDE_DIR"
    # sed -i.bak "s#INCLUDE_DIR=.*#INCLUDE_DIR=$INCLUDE_DIR#g" $1/Makefile

    # CYPRESS_DIR=../$PSOC5_LIB_NAME/Generated_Source/PSoC5
    # echo "replacing CYPRESS_DIR dir: $CYPRESS_DIR"
    # sed -i.bak "s#CYPRESS_DIR=.*#CYPRESS_DIR=$CYPRESS_DIR#g" $1/Makefile

    # CYPRESS_LIB=../$PSOC5_LIB_NAME/lib/monoCyLib.a
    # echo "replacing CYPRESS_LIB dir: $CYPRESS_LIB"
    # sed -i.bak "s#CYPRESS_LIB=.*#CYPRESS_LIB=$CYPRESS_LIB#g" $1/Makefile

	MONO_FRAMEWORK_PATH=../$MONOFRMWRK_NAME
	echo "replacing MONO_FRAMEWORK_PATH dir: $MONO_FRAMEWORK_PATH"
	sed -i.bak "s#MONO_FRAMEWORK_PATH=.*#MONO_FRAMEWORK_PATH=$MONO_FRAMEWORK_PATH#g" $1/Makefile

    # MBED_FS=../$MBED_LIB_NAME/libraries/fs
    # echo "replacing MBED_FS dir: $MBED_FS"
    # sed -i.bak "s#MBED_FS=.*#MBED_FS=$MBED_FS#g" $1/Makefile

    # COMP_LIB=../$PSOC5_LIB_NAME/lib/CyComponentLibrary.a
    # echo "replacing COMP_LIB dir: $COMP_LIB"
    # sed -i.bak "s#COMP_LIB=.*#COMP_LIB=$COMP_LIB#g" $1/Makefile

    # MONO_LIB=../$PSOC5_LIB_NAME/lib/monoCyLib.a
    # echo "replacing MONO_LIB dir: $MONO_LIB"
    # sed -i.bak "s#MONO_LIB=.*#MONO_LIB=$MONO_LIB#g" $1/Makefile

	PACKAGE_TARGET=../$DIST_DEST_DIR
	echo "replacing RELEASE_DIR dir: $PACKAGE_TARGET"
	sed -i.bak "s#RELEASE_DIR=.*#RELEASE_DIR=$PACKAGE_TARGET#g" $1/Makefile

}

function thinGcc {
	echo "Thinning GCC: docs"
	deleteSilent ./$1/share/doc
	
	echo "Thinning GCC: samples"
	deleteSilent ./$1/share/gcc-arm-none-eabi/samples
	
	echo "Thinning GCC: armv6-m, armv7-ar, armv7e-m, armv8-m & fpu libs"
	LIBS="./$1/lib/gcc/arm-none-eabi/5.2.1"
	deleteSilent $LIBS/armv6-m
	deleteSilent $LIBS/armv7-ar
	deleteSilent $LIBS/armv7e-m
	deleteSilent $LIBS/armv8-m.base
	deleteSilent $LIBS/armv8-m.main
	deleteSilent $LIBS/fpu
	
	LIBS="./$1/arm-none-eabi/lib"
	deleteSilent $LIBS/armv6-m
	deleteSilent $LIBS/armv7-ar
	deleteSilent $LIBS/armv7e-m
	deleteSilent $LIBS/armv8-m.base
	deleteSilent $LIBS/armv8-m.main
	deleteSilent $LIBS/fpu
}

function deleteSilent {
	if [ -e $1 ]; then
		rm -r $1
	fi
}